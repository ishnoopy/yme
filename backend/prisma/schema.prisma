generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Media {
  id          String          @id @default(uuid())
  uploader_id String
  file_url    String
  file_type   String
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  uploader    User            @relation(fields: [uploader_id], references: [id], onDelete: Cascade)
  answers     media_answer[]
  messages    media_message[]
}

model Profile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  username   String   @unique
  first_name String
  last_name  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  answers           Answer[]
  media             Media[]
  received_messages Message[]      @relation("received_messages")
  sent_messages     Message[]      @relation("sent_messages")
  notifications     Notification[]
  profile           Profile?
}

model Message {
  id            String         @id @default(uuid())
  sender_id     String?
  receiver_id   String
  content       String
  is_viewed     Boolean        @default(false)
  is_answered   Boolean        @default(false)
  is_deleted    Boolean        @default(false)
  is_anonymous  Boolean        @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?
  answer        Answer?
  receiver      User           @relation("received_messages", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender        User?          @relation("sent_messages", fields: [sender_id], references: [id], onDelete: Cascade)
  notifications Notification[]
  media         media_message?
}

model Answer {
  id         String        @id @default(uuid())
  message_id String        @unique
  user_id    String
  content    String
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  message    Message       @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  media      media_answer?
}

model media_message {
  id         String   @id @default(uuid())
  message_id String   @unique
  media_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  media      Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@unique([message_id, media_id])
}

model media_answer {
  id         String   @id @default(uuid())
  answer_id  String   @unique
  media_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  answer     Answer   @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  media      Media    @relation(fields: [media_id], references: [id], onDelete: Cascade)

  @@unique([answer_id, media_id])
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  message_id String
  is_viewed  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
